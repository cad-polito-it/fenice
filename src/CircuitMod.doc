#\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\-*-Text-*-
#                         \\                                                 \
#  Giovanni A. Squillero  //  Via Beaumont, 27  -  10138 TORINO  -  ITALY    /
#                         \\  +39-011-4345498 (Roma: +39-06-5816242)         \
#           (!)           //  squillero@polito.it                            /
#                         \\                                                 \
#/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/
#
#   $Source: /cadtools/program/Fenice-3.x/RCS/CircuitMod.doc,v $
# $Revision: 1.2 $
#     $Date: 1997/01/21 13:22:00 $ 
#
#/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/

	LIBCIRCUIT
	~~~~~~~~~~
	La   libreria libcircuit  e`    una libreria  di funzioni  che
facilitano la modifica di un circuito contenuto in memoria dopo che e`
stato letto con una delle procedure della famiglia "create".
	La libreria libcircuit esiste in due versioni: una di debug ed
una  ottimizzata.  Le due    versioni  hanno *ESATTAMENTE*  le  stesse
funzionalita`. La differenza e` che la versione di debug fa molti piu`
controlli  e   fornisce molte    piu`  informazioni  utilizzabili  per
risolvere problemi. inoltre la  libreria di debug e` utilizzabile  con
purify.
	Vi consiglio  di   *NON*  utilizzare la versione   ottimizzata
finche' il vostro programma non e` completamente testato.




##############################################################################
			   U T I L I Z Z O
##############################################################################

	Per poter   utilizzare le funzioni  della libreria,  il vostro
programma.c deve contenere gli include
	
	||  #include <data2.h>
	||  #include <CircuitMod.h>

	e dovete includere la libreria durante il linking:

	$ gcc ... -lcircuit-debug
	$ gcc ... -lcircuit-optimized
	$ gcc ... -lcircuit

	il primo comando linka la versione di debug della libreria, il
secondo e il terzo la versione ottimizzata.

	Tutte  le funzioni della  libreria  utilizzabili hanno il nome
che inizia  con CircuitMod_,  nel resto  del testo si  parlera`  della
funzione FooBar intendendo la funzione CircuitMod_FooBar.

	Alcune funzioni  nominate nel  file "CircuitMod.h"  non devono
essere utilizzate:  esse sono la  compute_level  e le funzioni il  cui
nome inizia con  internal. In particolare  *NON* bisogna utilizzare la
variabile CircuitModified.

	Dopo aver modificato  un circuito con  le funzioni elencate di
seguito, aggiungendo e  rimuovendo connessioni  e gate, e`  necessario
invocare  la funzione Commit.   BISOGNA  CHIAMARE  LA COMMIT PRIMA  DI
QUALSIASI  ALTRA FUNZIONE O PROCEDURA   CHE UTILIZZA LA STRUTTURA DATI
DEL CIRCUITO. INFATTI, LO STATO DELL'ARRAY DESCR NON E` COERENTE PRIMA
DELLA CHIAMATA A   COMMIT. In particolare:  non si  puo` utilizzare la
funzione get_assoc dopo aver iniziato a modificare il circuito.

	Inoltre dopo   la chiamata a Commit  TUTTI  I NUMERI  DEI GATE
POSSONO VENIR  MODIFICATI.  Esistono  funzioni  per  ottenere i  nuovi
numeri dei gate in modo quasi indolore.

	In altre parole, un programma  che modifica il circuito  sara`
abitualmente composto cosi`:

	||  #include <data2.h>
	||  #include <CircuitMod.h>
	||  
	||  create(...);		/* legge il circuito */
	||  
	||  x[0] = get_assoc("BAZ0");	/* salvo i numeri dei gate */
	||  ...
	||  x[99] = get_assoc("BAZ99");	/*           ''            */
	||  
	||  for(t=0; t<100; ++t)
	||      modifica_il_gate(x[t]);	/* modifico il circuito */
	||  }
	||  
	||  CircuitMod_Commit(NULL, 0);
	||  
	||  y = get_assoc("BAZ0");	/* puo` essere cambiato! */

	La funzione Commit e i suoi argomenti vengono spiegati nel seguito.
	


##############################################################################
			   F U N Z I O N I
##############################################################################

	MODIFICARE UN GATE
	~~~~~~~~~~~~~~~~~~


	MODIFICARE UN GATE
	~~~~~~~~~~~~~~~~~~
	void CircuitMod_SetTypeAttr(int gate, int type, int attr);

	Imposta il tipo e l'attributo del gate numero {gate}.
	Il  tipo   del  gate indica  "cosa"    sia il gate  (eg.  AND,
OR...). L'attributo    puo` essere: PI   (primary input),  PO (primary
output) o INTERNAL (tutto  il  resto).  I tipi   e gli attributi  sono
definiti nel file "data2.h".



	ELIMINARE E AGGIUNGERE CONNESSIONI
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	void CircuitMod_RemoveNet(int from, int to);
	void CircuitMod_AddNet(int from, int to);

	La    RemoveNet elimina dal   circuito  la  connessione che va
dall'uscita  del  gate numero  {from}  ad un ingresso del  gate numero
{to}.
	La AddNet aggiunge una nuova connessione fra l'uscita sel gate
numero {from} e l'ingresso del gate numero {to}. Possono esistere piu`
connessioni fra la stessa coppia di gate.



	ELIMINARE E AGGIUNGERE GATE
	~~~~~~~~~~~~~~~~~~~~~~~~~~~
	void CircuitMod_RemoveGate(int gate);
	int CircuitMod_GetFreeGate(void);
	int CircuitMod_AddGate(char *name, int type, int attr);

	La RemoveGate cancella il   gate  numero {gate} dal   circuito
eliminando  anche tutte le  connessioni che  partivano  da quel gate e
tutte quelle che arrivavano a quel gate.
	La  GetFreeGate    crea un  nuovo  gate     e  ritorna il  suo
numero. L'utente     deve   inizializzare i    campi   type,   attr  e
mano.  Usualmente questa funzione   non e` necessaria, utilizzatre  la
AddGate.
	La      AddGate    crea      un     nuovo   gate      e     lo
inizializza. Sostanzialmente questa  funzione e` equivalente  a queste
linee:

	||  int g = CircuitMod_GetFreeGate();
    	||  descr[g].name = strdup(name);
	||  descr[g].to_name = strdup(name);
    	||  descr[g].type = type;
	||  descr[g].attr = attr;

piu` qualche controllo.



	ARRAY
	~~~~~
	void CircuitMod_BuildFFArray(void);
	void CircuitMod_BuildPIArray(void);
	void CircuitMod_BuildPOArray(void);
	void CircuitMod_BuildArrays(void);

	Gli elenchi   dei flip flop,  dei primary  input e dei primary
output sono convenzionalmente  contenuti, rispettivamente, nei vettori
ppi_array, pi_array e po_array,  di dimensione (rispettivamente) n_ff,
n_pi e n_po.

	Si dice che alcune versioni della  funzione create riescano ad
inizializzare   correttamente  questi  vettori.  La  libreria  include
comunque le funzioni necessarie  per inizializzarli.

	BuildFFArray costruisce ppi_array e setta n_ff.

	BuildPIArray costruisce pi_array e setta n_pi.

	BuildPOArray costruisce po_array e setta n_po.

	BuildArrays costruisce  tutti    gli array e    setta tutte le
variabili.

	Vi suggerisco di chiamare BuilArrays subito dopo aver letto il
circuito. NON E`  NECESSARIO CHIAMARE NESSUNA  DI QUESTE FUNZIONI DOPO
AVER CHIAMATO COMMIT.


	VALIDARE LE MODIFICHE
	~~~~~~~~~~~~~~~~~~~~~
	void CircuitMod_Commit(FAULT * flist, int fnum);

	La Commit salva le modifiche  apportate al circuito, ricalcola
ppi_array, pi_array, po_array, n_ff, n_pi e n_po.

	La  Commit puo` anche   aggiornare  automaticamente una  fault
list. Ricordate infatti che i numeri  dei gate possono essere cambiati
(ie.   il gate  numero  23  prima della  Commit  adesso e`   il numero
10). Inoltre se  avete rimosso una  connessione dal gate 70, il quinto
ingresso del   gate 70 adesso potrebbe  essere  diventato il quarto...
Per   come  la  fault  list viene   salvata  in  memoria e` necessario
ricalcolarla completamente dopo la Commit.

	Se la Commit riceve in ingresso il puntatore ad una fault list
e  il  numero  di  guasti contenuti  nella   fault list,  la  aggiorna
automaticamente.  Se non avete una fault  list in  memoria chiamate la
funzione con argomenti NULL e 0 (ie.

	||  CircuitMod_Commit(NULL, 0);

come nell'esempio all'inizio del documento)

	La funzione Commit rimuove le connessioni aperte (ie. nel gate
y c'e` scritto che un un ingresso viene dal gate x, ma  nel gate x non
si   trova   scritto  che  un    uscita  va verso    il   gate   y.  O
viceversa).  Successivamente rimuove  tutti   i gate  che   hanno zero
ingressi e zero uscite.



	CONVERTIRE I NUMERI DEI GATE DOPO LA COMMIT
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	int CircuitMod_Translate(int x);
	int CircuitMod_TranslateVector(int *vector);

	La funzione Translate permette di  sapere come il numero di un
gate e`  cambiato dopo  la Commit. Ad  esempio:

	||  x = get_assoc("FOO");
	|| 
	||  ... /* modifica il circuito */
	|| 
	||  CircuitMod_Commit(NULL, 0);
	|| 
	||  new_x = CircuitMod_Translate(x);	/* equivalenti */
 	||  another_x = get_assoc("FOO");	/* equivalenti */
	|| 
	||  if(new_x != another_x) {
	||      exit(-1);			/* non capitera` mai */
	||  }

	La   funzione    TranslateVector     permette   di  convertire
automaticamente un vettore con la Translate. Il vettore deve terminare
con -1. La TranslateVector si comporta come:

	||  void CircuitMod_TranslateVector(int *vector)
	||  {
	||      while(*vector != -1)
	||  	    *vector = CircuitMod_Translate(*vector), ++vector;
	||  }

ma e` implementata in modo completamente diverso.
